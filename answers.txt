## Place your answers here.

exploit-2a.py attacks via the url_decode function that is called in http_request_line function[http.c:106] by providing a very long request path, enough to overflow the buffer reqpath and corrupt memory causing a segfault.

exploit-2b.py attacks via the function pointer defined in http_serve [http.c:276] called handler. By providing a long value to the name arg (via the ) the strcat function, which does not check bounds, can overwrite past the end of the pn buffer and into the handler fn pointer. With an invalid fn pointer address, the program segfaults when handler is invoked in :297. 

exploit-3.py attacks via the http_request_headers() method. That method parses the HTTP headers. It calls the vulnerable url_decode function to copy a decoded string into its value buf. The value buf is overflowed as to overwrite the saved eip on the stack. By placing the exploit shell code into the buff, and changing the saved eip to the start of the shellcode in the buf, I can run the arbitrary code. An additional complication is that the function runs in an infinite loop. Since the saved eip is not popped and executed until the fn returns, I needed to force the loop to break early and cause the function to return prematurely. I accomplished this by continuing to set memory above the saved eip in the stack to the value -1. This would result in the fd (which was an arg to http_request_headers) being passed to http_read_line to be invalid and the function to return based on [http.c:130-131]. This was very difficult to use gdb on, since I had also corruped the saved esp and ebp in the process, which gdb may have used toaccess some debug info. I used strace -fp $(pgrep zookfs-exstack) to follow the execution of the exploit without GDB running. Much thanks to TA Steven for helping overcome so many issues with this exploit.  

exploit-4a.py is a revised version of exploit-3.py that works when the nx bit is enabled. It overwrites the saved EIP (like the previous exploit) but instead sets the return to unlink. In the next word following the pointer to unlink(), it also inserts a fake return address to be executed after unlink is called - in this case, exit(). The next word is a pointer to a string with the file we would like to unlink, namely, '/home/httpd/grades.txt'. This was actually written into the final chars of the buffer that was overflowed (value). This was overflowed via the url_decode method called in http_request_headers. The fd arg to http_request_headers was no longer -1, but another invalid value based by the overflowing of the buffer. 

exploit-4b.py is a revised version of exploit-2b.py that attacks the function pointer handler. I overwrite the handler to point to unlink, like before. Since handler is called and the args pn and name are pushed onto the stack, and unlink takes only 1 arg, I needed to overwrite fd to point to a string with the target file to remove. I put this string immediately after fd (fd+4) and null terminated it. I had to add garbage characters in between the handler and fd with 4 words to write to the right location.

From exercise 1, I exploited both the url_decode and the strcat functions when they were called, so they work. The sprintf() vulnerability is also exploitable via a long request method via a stack smash. This could be executed via a return-to-libc type attack in addition to a regular clobbering of the saved EIP.

printf is used to set the QUERY_STRING in the envp method. A long query string as part of the request URI could be used in a buffer overflow attack by overwriting the saved EIP in the stack frame of http_request_line.
   
[http.c:164]
sprintf is used to set headers with HTTP_ prefix, so a maliciously crafted header could overflow the envvar buffer declared in [http.c:121] and overwrite the saved EIP of the http_request_headers function().

[http.c:165]
In general this server allows you to set arbitrary environment variables on the server, which is risky. For example, the attacker could overwrite the PATH or other key env variables.

[http.c:304]
This server serves any files on the server by using relative URLs. The server should implement some type of explicit access control system to limit what the server is able to access.
eq =   "GET / HTTP/1.0\r\n" +"User-Agent: "  + ('A'* (536+4)) + struct.pack("<I", int(stack_unlink_ptr)) + urllib.quote('/home/httpd/grades.txt') + "\r\n"#+ struct.pack("<i", int(-1))*300 + "\r\n" #"end with null"
